package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _template_method_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\x4f\x8f\xd3\x30\x10\xc5\xcf\xf5\xa7\x18\xf6\x80\x12\x64\xdc\x3b\xd2\x1e\xd8\x15\xac\x90\x56\xa8\x25\x48\x1c\x59\xc7\x99\x40\xd4\xd4\x41\x13\x07\xba\x8a\xf2\xdd\x91\x1d\xb7\x38\x7f\x4a\x7a\x28\xf8\x52\xa9\x9e\x8c\x7f\xf3\xde\x9b\xf5\x1a\xee\x09\xa5\x41\x28\x74\x8d\x64\x6a\x30\xdf\x11\xda\x16\x44\x62\xa8\x51\x46\x7c\x94\x7b\x84\xae\x03\x53\xb9\x9b\x4c\x1a\x99\xca\x1a\x05\xcb\x1b\xad\x20\x22\x78\x35\x2d\x8e\x7d\xcf\x28\x4b\x61\xdb\x20\x3d\x23\xc5\x80\x44\x15\x41\xcb\x00\x08\x4d\x43\x1a\x48\xf4\x55\xf7\x95\x36\x78\x30\x91\xea\x7f\xc5\x9d\x54\xbb\x6f\x54\x35\x3a\x8b\x62\x0e\x59\x1a\xb3\x8e\xb1\xf5\x1a\x1e\xd0\x4c\x9f\xba\x7b\xde\xec\xa0\xc6\x12\x95\x39\x47\x9e\x53\xb5\x9f\x63\x3f\xdb\x2f\xc0\xe6\xb6\xa1\x72\x98\x89\x7b\xc4\xde\xbf\x6f\xb4\xda\x48\x92\xfb\xfa\xf8\xb5\x9b\x39\x9a\x51\x82\xf7\x63\xc7\xe1\xdc\x67\xdf\x5d\x12\x62\x16\x26\xd9\x3e\x4e\x59\xbc\x62\x03\x7d\xff\x85\xc1\x27\x62\x73\x80\x23\xb5\xff\xcf\x02\xcf\x99\x0f\xd0\xb6\xaf\xa1\xc8\x4f\x2d\x3f\xcb\xb4\x44\xf1\xb6\x31\xd5\x03\xea\xcd\x0e\xba\xce\x55\xd9\x83\x44\xf0\xe6\x16\xb2\x54\xb8\x46\x9f\xaa\x5f\xc1\x83\x1c\x4e\x75\xf6\x3c\x9d\xb4\xf9\xe0\xe6\x4c\xb6\x8f\x81\x22\x4f\x7c\x50\x3c\xaa\x9d\x0a\x28\x12\x25\x75\x34\x6e\xa9\xa4\x1e\xa8\x7c\x9c\x06\xcb\x1a\x43\xee\xaf\x3c\x40\x7f\x77\x40\xf5\xbf\xb0\xff\x10\xe9\xcc\x02\xad\x8a\xdc\x91\xbc\xb8\x05\x5d\x94\x5e\x7f\x7b\x7c\x14\x9d\x2d\xb5\xf8\x42\xf2\x47\x84\x44\x1c\x6e\x72\x59\x94\x98\xd9\x30\xf4\x71\x09\x93\xd2\x3b\xe5\x23\x70\x13\xb3\x55\xc7\x56\xbe\x91\x2e\xca\xa5\x2d\x3d\xc6\xf0\xca\xcb\x7a\x61\x04\xaf\xba\xc8\x00\x3f\x25\x01\xcd\xf0\xb3\xe5\xd8\xb2\xa9\xf5\x83\x6d\x9e\xb7\xff\xd2\xcd\x1f\x05\x37\xa8\x1e\x87\x77\x29\x1b\xba\x28\xf9\x5f\x03\xe2\x8d\xbc\x2c\x20\x2f\x89\xfb\x90\xfc\x0e\x00\x00\xff\xff\x8d\xa6\xc3\x96\x72\x06\x00\x00")

func template_method_tmpl() ([]byte, error) {
	return bindata_read(
		_template_method_tmpl,
		"template/method.tmpl",
	)
}

var _template_struct_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x0a\xc2\x30\x10\x45\xd7\xe6\x14\xff\x02\xa6\x87\x10\x5c\xba\x69\x2f\x10\xdb\x8f\x0a\x49\x2c\x49\xba\x90\x61\xee\x2e\x23\xb5\x08\x76\xf7\x87\x3f\xef\xcd\x74\x1d\x44\xe0\xfb\x56\x96\xb1\xf9\x4b\x48\x84\x2a\x0a\xe7\xc2\xca\xdc\xea\x6f\x3b\x84\x6b\xa4\xef\xc7\x3b\x53\x80\xaa\xff\xab\x56\xdc\xb5\xd7\xcc\x3d\x6d\xfd\x8c\x10\x27\x72\x44\x09\xf9\xc6\x6d\xe5\xfc\x60\x9c\xaa\xc1\x07\x03\xbf\x84\xe5\xc1\x6c\xaa\x58\x5f\x3d\x3d\xe3\x92\xf2\x76\xcb\x54\xcc\x93\x45\x75\xef\x00\x00\x00\xff\xff\xc1\x7f\x9b\xb1\xce\x00\x00\x00")

func template_struct_tmpl() ([]byte, error) {
	return bindata_read(
		_template_struct_tmpl,
		"template/struct.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"template/method.tmpl": template_method_tmpl,
	"template/struct.tmpl": template_struct_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"template": &_bintree_t{nil, map[string]*_bintree_t{
		"method.tmpl": &_bintree_t{template_method_tmpl, map[string]*_bintree_t{
		}},
		"struct.tmpl": &_bintree_t{template_struct_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
